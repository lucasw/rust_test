/* automatically generated by rust-bindgen 0.55.1 */

pub const _INTTYPES_H: u32 = 1;
pub const _FEATURES_H: u32 = 1;
pub const _DEFAULT_SOURCE: u32 = 1;
pub const __GLIBC_USE_ISOC2X: u32 = 0;
pub const __USE_ISOC11: u32 = 1;
pub const __USE_ISOC99: u32 = 1;
pub const __USE_ISOC95: u32 = 1;
pub const __USE_POSIX_IMPLICITLY: u32 = 1;
pub const _POSIX_SOURCE: u32 = 1;
pub const _POSIX_C_SOURCE: u32 = 200809;
pub const __USE_POSIX: u32 = 1;
pub const __USE_POSIX2: u32 = 1;
pub const __USE_POSIX199309: u32 = 1;
pub const __USE_POSIX199506: u32 = 1;
pub const __USE_XOPEN2K: u32 = 1;
pub const __USE_XOPEN2K8: u32 = 1;
pub const _ATFILE_SOURCE: u32 = 1;
pub const __USE_MISC: u32 = 1;
pub const __USE_ATFILE: u32 = 1;
pub const __USE_FORTIFY_LEVEL: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_GETS: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_SCANF: u32 = 0;
pub const _STDC_PREDEF_H: u32 = 1;
pub const __STDC_IEC_559__: u32 = 1;
pub const __STDC_IEC_559_COMPLEX__: u32 = 1;
pub const __STDC_ISO_10646__: u32 = 201706;
pub const __GNU_LIBRARY__: u32 = 6;
pub const __GLIBC__: u32 = 2;
pub const __GLIBC_MINOR__: u32 = 31;
pub const _SYS_CDEFS_H: u32 = 1;
pub const __glibc_c99_flexarr_available: u32 = 1;
pub const __WORDSIZE: u32 = 64;
pub const __WORDSIZE_TIME64_COMPAT32: u32 = 1;
pub const __SYSCALL_WORDSIZE: u32 = 64;
pub const __LONG_DOUBLE_USES_FLOAT128: u32 = 0;
pub const __HAVE_GENERIC_SELECTION: u32 = 1;
pub const _STDINT_H: u32 = 1;
pub const __GLIBC_USE_LIB_EXT2: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT_C2X: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT_C2X: u32 = 0;
pub const __GLIBC_USE_IEC_60559_TYPES_EXT: u32 = 0;
pub const _BITS_TYPES_H: u32 = 1;
pub const __TIMESIZE: u32 = 64;
pub const _BITS_TYPESIZES_H: u32 = 1;
pub const __OFF_T_MATCHES_OFF64_T: u32 = 1;
pub const __INO_T_MATCHES_INO64_T: u32 = 1;
pub const __RLIM_T_MATCHES_RLIM64_T: u32 = 1;
pub const __STATFS_MATCHES_STATFS64: u32 = 1;
pub const __FD_SETSIZE: u32 = 1024;
pub const _BITS_TIME64_H: u32 = 1;
pub const _BITS_WCHAR_H: u32 = 1;
pub const _BITS_STDINT_INTN_H: u32 = 1;
pub const _BITS_STDINT_UINTN_H: u32 = 1;
pub const INT8_MIN: i32 = -128;
pub const INT16_MIN: i32 = -32768;
pub const INT32_MIN: i32 = -2147483648;
pub const INT8_MAX: u32 = 127;
pub const INT16_MAX: u32 = 32767;
pub const INT32_MAX: u32 = 2147483647;
pub const UINT8_MAX: u32 = 255;
pub const UINT16_MAX: u32 = 65535;
pub const UINT32_MAX: u32 = 4294967295;
pub const INT_LEAST8_MIN: i32 = -128;
pub const INT_LEAST16_MIN: i32 = -32768;
pub const INT_LEAST32_MIN: i32 = -2147483648;
pub const INT_LEAST8_MAX: u32 = 127;
pub const INT_LEAST16_MAX: u32 = 32767;
pub const INT_LEAST32_MAX: u32 = 2147483647;
pub const UINT_LEAST8_MAX: u32 = 255;
pub const UINT_LEAST16_MAX: u32 = 65535;
pub const UINT_LEAST32_MAX: u32 = 4294967295;
pub const INT_FAST8_MIN: i32 = -128;
pub const INT_FAST16_MIN: i64 = -9223372036854775808;
pub const INT_FAST32_MIN: i64 = -9223372036854775808;
pub const INT_FAST8_MAX: u32 = 127;
pub const INT_FAST16_MAX: u64 = 9223372036854775807;
pub const INT_FAST32_MAX: u64 = 9223372036854775807;
pub const UINT_FAST8_MAX: u32 = 255;
pub const UINT_FAST16_MAX: i32 = -1;
pub const UINT_FAST32_MAX: i32 = -1;
pub const INTPTR_MIN: i64 = -9223372036854775808;
pub const INTPTR_MAX: u64 = 9223372036854775807;
pub const UINTPTR_MAX: i32 = -1;
pub const PTRDIFF_MIN: i64 = -9223372036854775808;
pub const PTRDIFF_MAX: u64 = 9223372036854775807;
pub const SIG_ATOMIC_MIN: i32 = -2147483648;
pub const SIG_ATOMIC_MAX: u32 = 2147483647;
pub const SIZE_MAX: i32 = -1;
pub const WINT_MIN: u32 = 0;
pub const WINT_MAX: u32 = 4294967295;
pub const ____gwchar_t_defined: u32 = 1;
pub const __PRI64_PREFIX: &'static [u8; 2usize] = b"l\0";
pub const __PRIPTR_PREFIX: &'static [u8; 2usize] = b"l\0";
pub const PRId8: &'static [u8; 2usize] = b"d\0";
pub const PRId16: &'static [u8; 2usize] = b"d\0";
pub const PRId32: &'static [u8; 2usize] = b"d\0";
pub const PRId64: &'static [u8; 3usize] = b"ld\0";
pub const PRIdLEAST8: &'static [u8; 2usize] = b"d\0";
pub const PRIdLEAST16: &'static [u8; 2usize] = b"d\0";
pub const PRIdLEAST32: &'static [u8; 2usize] = b"d\0";
pub const PRIdLEAST64: &'static [u8; 3usize] = b"ld\0";
pub const PRIdFAST8: &'static [u8; 2usize] = b"d\0";
pub const PRIdFAST16: &'static [u8; 3usize] = b"ld\0";
pub const PRIdFAST32: &'static [u8; 3usize] = b"ld\0";
pub const PRIdFAST64: &'static [u8; 3usize] = b"ld\0";
pub const PRIi8: &'static [u8; 2usize] = b"i\0";
pub const PRIi16: &'static [u8; 2usize] = b"i\0";
pub const PRIi32: &'static [u8; 2usize] = b"i\0";
pub const PRIi64: &'static [u8; 3usize] = b"li\0";
pub const PRIiLEAST8: &'static [u8; 2usize] = b"i\0";
pub const PRIiLEAST16: &'static [u8; 2usize] = b"i\0";
pub const PRIiLEAST32: &'static [u8; 2usize] = b"i\0";
pub const PRIiLEAST64: &'static [u8; 3usize] = b"li\0";
pub const PRIiFAST8: &'static [u8; 2usize] = b"i\0";
pub const PRIiFAST16: &'static [u8; 3usize] = b"li\0";
pub const PRIiFAST32: &'static [u8; 3usize] = b"li\0";
pub const PRIiFAST64: &'static [u8; 3usize] = b"li\0";
pub const PRIo8: &'static [u8; 2usize] = b"o\0";
pub const PRIo16: &'static [u8; 2usize] = b"o\0";
pub const PRIo32: &'static [u8; 2usize] = b"o\0";
pub const PRIo64: &'static [u8; 3usize] = b"lo\0";
pub const PRIoLEAST8: &'static [u8; 2usize] = b"o\0";
pub const PRIoLEAST16: &'static [u8; 2usize] = b"o\0";
pub const PRIoLEAST32: &'static [u8; 2usize] = b"o\0";
pub const PRIoLEAST64: &'static [u8; 3usize] = b"lo\0";
pub const PRIoFAST8: &'static [u8; 2usize] = b"o\0";
pub const PRIoFAST16: &'static [u8; 3usize] = b"lo\0";
pub const PRIoFAST32: &'static [u8; 3usize] = b"lo\0";
pub const PRIoFAST64: &'static [u8; 3usize] = b"lo\0";
pub const PRIu8: &'static [u8; 2usize] = b"u\0";
pub const PRIu16: &'static [u8; 2usize] = b"u\0";
pub const PRIu32: &'static [u8; 2usize] = b"u\0";
pub const PRIu64: &'static [u8; 3usize] = b"lu\0";
pub const PRIuLEAST8: &'static [u8; 2usize] = b"u\0";
pub const PRIuLEAST16: &'static [u8; 2usize] = b"u\0";
pub const PRIuLEAST32: &'static [u8; 2usize] = b"u\0";
pub const PRIuLEAST64: &'static [u8; 3usize] = b"lu\0";
pub const PRIuFAST8: &'static [u8; 2usize] = b"u\0";
pub const PRIuFAST16: &'static [u8; 3usize] = b"lu\0";
pub const PRIuFAST32: &'static [u8; 3usize] = b"lu\0";
pub const PRIuFAST64: &'static [u8; 3usize] = b"lu\0";
pub const PRIx8: &'static [u8; 2usize] = b"x\0";
pub const PRIx16: &'static [u8; 2usize] = b"x\0";
pub const PRIx32: &'static [u8; 2usize] = b"x\0";
pub const PRIx64: &'static [u8; 3usize] = b"lx\0";
pub const PRIxLEAST8: &'static [u8; 2usize] = b"x\0";
pub const PRIxLEAST16: &'static [u8; 2usize] = b"x\0";
pub const PRIxLEAST32: &'static [u8; 2usize] = b"x\0";
pub const PRIxLEAST64: &'static [u8; 3usize] = b"lx\0";
pub const PRIxFAST8: &'static [u8; 2usize] = b"x\0";
pub const PRIxFAST16: &'static [u8; 3usize] = b"lx\0";
pub const PRIxFAST32: &'static [u8; 3usize] = b"lx\0";
pub const PRIxFAST64: &'static [u8; 3usize] = b"lx\0";
pub const PRIX8: &'static [u8; 2usize] = b"X\0";
pub const PRIX16: &'static [u8; 2usize] = b"X\0";
pub const PRIX32: &'static [u8; 2usize] = b"X\0";
pub const PRIX64: &'static [u8; 3usize] = b"lX\0";
pub const PRIXLEAST8: &'static [u8; 2usize] = b"X\0";
pub const PRIXLEAST16: &'static [u8; 2usize] = b"X\0";
pub const PRIXLEAST32: &'static [u8; 2usize] = b"X\0";
pub const PRIXLEAST64: &'static [u8; 3usize] = b"lX\0";
pub const PRIXFAST8: &'static [u8; 2usize] = b"X\0";
pub const PRIXFAST16: &'static [u8; 3usize] = b"lX\0";
pub const PRIXFAST32: &'static [u8; 3usize] = b"lX\0";
pub const PRIXFAST64: &'static [u8; 3usize] = b"lX\0";
pub const PRIdMAX: &'static [u8; 3usize] = b"ld\0";
pub const PRIiMAX: &'static [u8; 3usize] = b"li\0";
pub const PRIoMAX: &'static [u8; 3usize] = b"lo\0";
pub const PRIuMAX: &'static [u8; 3usize] = b"lu\0";
pub const PRIxMAX: &'static [u8; 3usize] = b"lx\0";
pub const PRIXMAX: &'static [u8; 3usize] = b"lX\0";
pub const PRIdPTR: &'static [u8; 3usize] = b"ld\0";
pub const PRIiPTR: &'static [u8; 3usize] = b"li\0";
pub const PRIoPTR: &'static [u8; 3usize] = b"lo\0";
pub const PRIuPTR: &'static [u8; 3usize] = b"lu\0";
pub const PRIxPTR: &'static [u8; 3usize] = b"lx\0";
pub const PRIXPTR: &'static [u8; 3usize] = b"lX\0";
pub const SCNd8: &'static [u8; 4usize] = b"hhd\0";
pub const SCNd16: &'static [u8; 3usize] = b"hd\0";
pub const SCNd32: &'static [u8; 2usize] = b"d\0";
pub const SCNd64: &'static [u8; 3usize] = b"ld\0";
pub const SCNdLEAST8: &'static [u8; 4usize] = b"hhd\0";
pub const SCNdLEAST16: &'static [u8; 3usize] = b"hd\0";
pub const SCNdLEAST32: &'static [u8; 2usize] = b"d\0";
pub const SCNdLEAST64: &'static [u8; 3usize] = b"ld\0";
pub const SCNdFAST8: &'static [u8; 4usize] = b"hhd\0";
pub const SCNdFAST16: &'static [u8; 3usize] = b"ld\0";
pub const SCNdFAST32: &'static [u8; 3usize] = b"ld\0";
pub const SCNdFAST64: &'static [u8; 3usize] = b"ld\0";
pub const SCNi8: &'static [u8; 4usize] = b"hhi\0";
pub const SCNi16: &'static [u8; 3usize] = b"hi\0";
pub const SCNi32: &'static [u8; 2usize] = b"i\0";
pub const SCNi64: &'static [u8; 3usize] = b"li\0";
pub const SCNiLEAST8: &'static [u8; 4usize] = b"hhi\0";
pub const SCNiLEAST16: &'static [u8; 3usize] = b"hi\0";
pub const SCNiLEAST32: &'static [u8; 2usize] = b"i\0";
pub const SCNiLEAST64: &'static [u8; 3usize] = b"li\0";
pub const SCNiFAST8: &'static [u8; 4usize] = b"hhi\0";
pub const SCNiFAST16: &'static [u8; 3usize] = b"li\0";
pub const SCNiFAST32: &'static [u8; 3usize] = b"li\0";
pub const SCNiFAST64: &'static [u8; 3usize] = b"li\0";
pub const SCNu8: &'static [u8; 4usize] = b"hhu\0";
pub const SCNu16: &'static [u8; 3usize] = b"hu\0";
pub const SCNu32: &'static [u8; 2usize] = b"u\0";
pub const SCNu64: &'static [u8; 3usize] = b"lu\0";
pub const SCNuLEAST8: &'static [u8; 4usize] = b"hhu\0";
pub const SCNuLEAST16: &'static [u8; 3usize] = b"hu\0";
pub const SCNuLEAST32: &'static [u8; 2usize] = b"u\0";
pub const SCNuLEAST64: &'static [u8; 3usize] = b"lu\0";
pub const SCNuFAST8: &'static [u8; 4usize] = b"hhu\0";
pub const SCNuFAST16: &'static [u8; 3usize] = b"lu\0";
pub const SCNuFAST32: &'static [u8; 3usize] = b"lu\0";
pub const SCNuFAST64: &'static [u8; 3usize] = b"lu\0";
pub const SCNo8: &'static [u8; 4usize] = b"hho\0";
pub const SCNo16: &'static [u8; 3usize] = b"ho\0";
pub const SCNo32: &'static [u8; 2usize] = b"o\0";
pub const SCNo64: &'static [u8; 3usize] = b"lo\0";
pub const SCNoLEAST8: &'static [u8; 4usize] = b"hho\0";
pub const SCNoLEAST16: &'static [u8; 3usize] = b"ho\0";
pub const SCNoLEAST32: &'static [u8; 2usize] = b"o\0";
pub const SCNoLEAST64: &'static [u8; 3usize] = b"lo\0";
pub const SCNoFAST8: &'static [u8; 4usize] = b"hho\0";
pub const SCNoFAST16: &'static [u8; 3usize] = b"lo\0";
pub const SCNoFAST32: &'static [u8; 3usize] = b"lo\0";
pub const SCNoFAST64: &'static [u8; 3usize] = b"lo\0";
pub const SCNx8: &'static [u8; 4usize] = b"hhx\0";
pub const SCNx16: &'static [u8; 3usize] = b"hx\0";
pub const SCNx32: &'static [u8; 2usize] = b"x\0";
pub const SCNx64: &'static [u8; 3usize] = b"lx\0";
pub const SCNxLEAST8: &'static [u8; 4usize] = b"hhx\0";
pub const SCNxLEAST16: &'static [u8; 3usize] = b"hx\0";
pub const SCNxLEAST32: &'static [u8; 2usize] = b"x\0";
pub const SCNxLEAST64: &'static [u8; 3usize] = b"lx\0";
pub const SCNxFAST8: &'static [u8; 4usize] = b"hhx\0";
pub const SCNxFAST16: &'static [u8; 3usize] = b"lx\0";
pub const SCNxFAST32: &'static [u8; 3usize] = b"lx\0";
pub const SCNxFAST64: &'static [u8; 3usize] = b"lx\0";
pub const SCNdMAX: &'static [u8; 3usize] = b"ld\0";
pub const SCNiMAX: &'static [u8; 3usize] = b"li\0";
pub const SCNoMAX: &'static [u8; 3usize] = b"lo\0";
pub const SCNuMAX: &'static [u8; 3usize] = b"lu\0";
pub const SCNxMAX: &'static [u8; 3usize] = b"lx\0";
pub const SCNdPTR: &'static [u8; 3usize] = b"ld\0";
pub const SCNiPTR: &'static [u8; 3usize] = b"li\0";
pub const SCNoPTR: &'static [u8; 3usize] = b"lo\0";
pub const SCNuPTR: &'static [u8; 3usize] = b"lu\0";
pub const SCNxPTR: &'static [u8; 3usize] = b"lx\0";
pub const FREI0R_MAJOR_VERSION: u32 = 1;
pub const FREI0R_MINOR_VERSION: u32 = 2;
pub const F0R_PLUGIN_TYPE_FILTER: u32 = 0;
pub const F0R_PLUGIN_TYPE_SOURCE: u32 = 1;
pub const F0R_PLUGIN_TYPE_MIXER2: u32 = 2;
pub const F0R_PLUGIN_TYPE_MIXER3: u32 = 3;
pub const F0R_COLOR_MODEL_BGRA8888: u32 = 0;
pub const F0R_COLOR_MODEL_RGBA8888: u32 = 1;
pub const F0R_COLOR_MODEL_PACKED32: u32 = 2;
pub const F0R_PARAM_BOOL: u32 = 0;
pub const F0R_PARAM_DOUBLE: u32 = 1;
pub const F0R_PARAM_COLOR: u32 = 2;
pub const F0R_PARAM_POSITION: u32 = 3;
pub const F0R_PARAM_STRING: u32 = 4;
pub type __u_char = ::std::os::raw::c_uchar;
pub type __u_short = ::std::os::raw::c_ushort;
pub type __u_int = ::std::os::raw::c_uint;
pub type __u_long = ::std::os::raw::c_ulong;
pub type __int8_t = ::std::os::raw::c_schar;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_long;
pub type __uint64_t = ::std::os::raw::c_ulong;
pub type __int_least8_t = __int8_t;
pub type __uint_least8_t = __uint8_t;
pub type __int_least16_t = __int16_t;
pub type __uint_least16_t = __uint16_t;
pub type __int_least32_t = __int32_t;
pub type __uint_least32_t = __uint32_t;
pub type __int_least64_t = __int64_t;
pub type __uint_least64_t = __uint64_t;
pub type __quad_t = ::std::os::raw::c_long;
pub type __u_quad_t = ::std::os::raw::c_ulong;
pub type __intmax_t = ::std::os::raw::c_long;
pub type __uintmax_t = ::std::os::raw::c_ulong;
pub type __dev_t = ::std::os::raw::c_ulong;
pub type __uid_t = ::std::os::raw::c_uint;
pub type __gid_t = ::std::os::raw::c_uint;
pub type __ino_t = ::std::os::raw::c_ulong;
pub type __ino64_t = ::std::os::raw::c_ulong;
pub type __mode_t = ::std::os::raw::c_uint;
pub type __nlink_t = ::std::os::raw::c_ulong;
pub type __off_t = ::std::os::raw::c_long;
pub type __off64_t = ::std::os::raw::c_long;
pub type __pid_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __fsid_t {
    pub __val: [::std::os::raw::c_int; 2usize],
}
#[test]
fn bindgen_test_layout___fsid_t() {
    assert_eq!(
        ::std::mem::size_of::<__fsid_t>(),
        8usize,
        concat!("Size of: ", stringify!(__fsid_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__fsid_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__fsid_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__fsid_t>())).__val as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__fsid_t),
            "::",
            stringify!(__val)
        )
    );
}
pub type __clock_t = ::std::os::raw::c_long;
pub type __rlim_t = ::std::os::raw::c_ulong;
pub type __rlim64_t = ::std::os::raw::c_ulong;
pub type __id_t = ::std::os::raw::c_uint;
pub type __time_t = ::std::os::raw::c_long;
pub type __useconds_t = ::std::os::raw::c_uint;
pub type __suseconds_t = ::std::os::raw::c_long;
pub type __daddr_t = ::std::os::raw::c_int;
pub type __key_t = ::std::os::raw::c_int;
pub type __clockid_t = ::std::os::raw::c_int;
pub type __timer_t = *mut ::std::os::raw::c_void;
pub type __blksize_t = ::std::os::raw::c_long;
pub type __blkcnt_t = ::std::os::raw::c_long;
pub type __blkcnt64_t = ::std::os::raw::c_long;
pub type __fsblkcnt_t = ::std::os::raw::c_ulong;
pub type __fsblkcnt64_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt64_t = ::std::os::raw::c_ulong;
pub type __fsword_t = ::std::os::raw::c_long;
pub type __ssize_t = ::std::os::raw::c_long;
pub type __syscall_slong_t = ::std::os::raw::c_long;
pub type __syscall_ulong_t = ::std::os::raw::c_ulong;
pub type __loff_t = __off64_t;
pub type __caddr_t = *mut ::std::os::raw::c_char;
pub type __intptr_t = ::std::os::raw::c_long;
pub type __socklen_t = ::std::os::raw::c_uint;
pub type __sig_atomic_t = ::std::os::raw::c_int;
pub type int_least8_t = __int_least8_t;
pub type int_least16_t = __int_least16_t;
pub type int_least32_t = __int_least32_t;
pub type int_least64_t = __int_least64_t;
pub type uint_least8_t = __uint_least8_t;
pub type uint_least16_t = __uint_least16_t;
pub type uint_least32_t = __uint_least32_t;
pub type uint_least64_t = __uint_least64_t;
pub type int_fast8_t = ::std::os::raw::c_schar;
pub type int_fast16_t = ::std::os::raw::c_long;
pub type int_fast32_t = ::std::os::raw::c_long;
pub type int_fast64_t = ::std::os::raw::c_long;
pub type uint_fast8_t = ::std::os::raw::c_uchar;
pub type uint_fast16_t = ::std::os::raw::c_ulong;
pub type uint_fast32_t = ::std::os::raw::c_ulong;
pub type uint_fast64_t = ::std::os::raw::c_ulong;
pub type intmax_t = __intmax_t;
pub type uintmax_t = __uintmax_t;
pub type __gwchar_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct imaxdiv_t {
    pub quot: ::std::os::raw::c_long,
    pub rem: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_imaxdiv_t() {
    assert_eq!(
        ::std::mem::size_of::<imaxdiv_t>(),
        16usize,
        concat!("Size of: ", stringify!(imaxdiv_t))
    );
    assert_eq!(
        ::std::mem::align_of::<imaxdiv_t>(),
        8usize,
        concat!("Alignment of ", stringify!(imaxdiv_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<imaxdiv_t>())).quot as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(imaxdiv_t),
            "::",
            stringify!(quot)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<imaxdiv_t>())).rem as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(imaxdiv_t),
            "::",
            stringify!(rem)
        )
    );
}
extern "C" {
    pub fn imaxabs(__n: intmax_t) -> intmax_t;
}
extern "C" {
    pub fn imaxdiv(__numer: intmax_t, __denom: intmax_t) -> imaxdiv_t;
}
extern "C" {
    pub fn strtoimax(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> intmax_t;
}
extern "C" {
    pub fn strtoumax(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> uintmax_t;
}
extern "C" {
    pub fn wcstoimax(
        __nptr: *const __gwchar_t,
        __endptr: *mut *mut __gwchar_t,
        __base: ::std::os::raw::c_int,
    ) -> intmax_t;
}
extern "C" {
    pub fn wcstoumax(
        __nptr: *const __gwchar_t,
        __endptr: *mut *mut __gwchar_t,
        __base: ::std::os::raw::c_int,
    ) -> uintmax_t;
}
extern "C" {
    #[doc = " f0r_init() is called once when the plugin is loaded by the application."]
    #[doc = " \\see f0r_deinit"]
    pub fn f0r_init() -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " f0r_deinit is called once when the plugin is unloaded by the application."]
    #[doc = " \\see f0r_init"]
    pub fn f0r_deinit();
}
#[doc = " The f0r_plugin_info_t structure is filled in by the plugin"]
#[doc = " to tell the application about its name, type, number of parameters,"]
#[doc = " and version."]
#[doc = ""]
#[doc = " An application should ignore (i.e. not use) frei0r effects that"]
#[doc = " have unknown values in the plugin_type or color_model field."]
#[doc = " It should also ignore effects with a too high frei0r_version."]
#[doc = ""]
#[doc = " This is necessary to be able to extend the frei0r spec (e.g."]
#[doc = " by adding new color models or plugin types) in a way that does not"]
#[doc = " result in crashes when loading effects that make use of these"]
#[doc = " extensions into an older application."]
#[doc = ""]
#[doc = " All strings are unicode, 0-terminated, and the encoding is utf-8."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct f0r_plugin_info {
    #[doc = "< The (short) name of the plugin"]
    pub name: *const ::std::os::raw::c_char,
    #[doc = "< The plugin author"]
    pub author: *const ::std::os::raw::c_char,
    #[doc = " The plugin type"]
    #[doc = " \\see PLUGIN_TYPE"]
    pub plugin_type: ::std::os::raw::c_int,
    #[doc = "< The color model used"]
    pub color_model: ::std::os::raw::c_int,
    #[doc = "< The frei0r major version this plugin is built for"]
    pub frei0r_version: ::std::os::raw::c_int,
    #[doc = "< The major version of the plugin"]
    pub major_version: ::std::os::raw::c_int,
    #[doc = "< The minor version of the plugin"]
    pub minor_version: ::std::os::raw::c_int,
    #[doc = "< The number of parameters of the plugin"]
    pub num_params: ::std::os::raw::c_int,
    #[doc = "< An optional explanation string"]
    pub explanation: *const ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_f0r_plugin_info() {
    assert_eq!(
        ::std::mem::size_of::<f0r_plugin_info>(),
        48usize,
        concat!("Size of: ", stringify!(f0r_plugin_info))
    );
    assert_eq!(
        ::std::mem::align_of::<f0r_plugin_info>(),
        8usize,
        concat!("Alignment of ", stringify!(f0r_plugin_info))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<f0r_plugin_info>())).name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(f0r_plugin_info),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<f0r_plugin_info>())).author as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(f0r_plugin_info),
            "::",
            stringify!(author)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<f0r_plugin_info>())).plugin_type as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(f0r_plugin_info),
            "::",
            stringify!(plugin_type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<f0r_plugin_info>())).color_model as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(f0r_plugin_info),
            "::",
            stringify!(color_model)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<f0r_plugin_info>())).frei0r_version as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(f0r_plugin_info),
            "::",
            stringify!(frei0r_version)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<f0r_plugin_info>())).major_version as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(f0r_plugin_info),
            "::",
            stringify!(major_version)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<f0r_plugin_info>())).minor_version as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(f0r_plugin_info),
            "::",
            stringify!(minor_version)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<f0r_plugin_info>())).num_params as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(f0r_plugin_info),
            "::",
            stringify!(num_params)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<f0r_plugin_info>())).explanation as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(f0r_plugin_info),
            "::",
            stringify!(explanation)
        )
    );
}
#[doc = " The f0r_plugin_info_t structure is filled in by the plugin"]
#[doc = " to tell the application about its name, type, number of parameters,"]
#[doc = " and version."]
#[doc = ""]
#[doc = " An application should ignore (i.e. not use) frei0r effects that"]
#[doc = " have unknown values in the plugin_type or color_model field."]
#[doc = " It should also ignore effects with a too high frei0r_version."]
#[doc = ""]
#[doc = " This is necessary to be able to extend the frei0r spec (e.g."]
#[doc = " by adding new color models or plugin types) in a way that does not"]
#[doc = " result in crashes when loading effects that make use of these"]
#[doc = " extensions into an older application."]
#[doc = ""]
#[doc = " All strings are unicode, 0-terminated, and the encoding is utf-8."]
pub type f0r_plugin_info_t = f0r_plugin_info;
extern "C" {
    #[doc = " Is called once after init. The plugin has to fill in the values in info."]
    #[doc = ""]
    #[doc = " \\param info Pointer to an info struct allocated by the application."]
    pub fn f0r_get_plugin_info(info: *mut f0r_plugin_info_t);
}
#[doc = " The boolean type. The allowed range of values is [0, 1]."]
#[doc = " [0, 0.5[ is mapped to false and [0.5, 1] is mapped to true."]
pub type f0r_param_bool = f64;
#[doc = " The double type. The allowed range of values is [0, 1]."]
pub type f0r_param_double = f64;
#[doc = " The color type. All three color components are in the range [0, 1]."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct f0r_param_color {
    #[doc = "< red color component"]
    pub r: f32,
    #[doc = "< green color component"]
    pub g: f32,
    #[doc = "< blue color component"]
    pub b: f32,
}
#[test]
fn bindgen_test_layout_f0r_param_color() {
    assert_eq!(
        ::std::mem::size_of::<f0r_param_color>(),
        12usize,
        concat!("Size of: ", stringify!(f0r_param_color))
    );
    assert_eq!(
        ::std::mem::align_of::<f0r_param_color>(),
        4usize,
        concat!("Alignment of ", stringify!(f0r_param_color))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<f0r_param_color>())).r as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(f0r_param_color),
            "::",
            stringify!(r)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<f0r_param_color>())).g as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(f0r_param_color),
            "::",
            stringify!(g)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<f0r_param_color>())).b as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(f0r_param_color),
            "::",
            stringify!(b)
        )
    );
}
#[doc = " The color type. All three color components are in the range [0, 1]."]
pub type f0r_param_color_t = f0r_param_color;
#[doc = " The position type. Both position coordinates are in the range [0, 1]."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct f0r_param_position {
    #[doc = "< x coordinate"]
    pub x: f64,
    #[doc = "< y coordinate"]
    pub y: f64,
}
#[test]
fn bindgen_test_layout_f0r_param_position() {
    assert_eq!(
        ::std::mem::size_of::<f0r_param_position>(),
        16usize,
        concat!("Size of: ", stringify!(f0r_param_position))
    );
    assert_eq!(
        ::std::mem::align_of::<f0r_param_position>(),
        8usize,
        concat!("Alignment of ", stringify!(f0r_param_position))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<f0r_param_position>())).x as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(f0r_param_position),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<f0r_param_position>())).y as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(f0r_param_position),
            "::",
            stringify!(y)
        )
    );
}
#[doc = " The position type. Both position coordinates are in the range [0, 1]."]
pub type f0r_param_position_t = f0r_param_position;
#[doc = " The string type."]
#[doc = " Zero terminated array of 8-bit values in utf-8 encoding"]
pub type f0r_param_string = *mut ::std::os::raw::c_char;
#[doc = " Similar to f0r_plugin_info_t, this structure is filled by the plugin"]
#[doc = " for every parameter."]
#[doc = ""]
#[doc = " All strings are unicode, 0-terminated, and the encoding is utf-8."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct f0r_param_info {
    #[doc = "<The (short) name of the param"]
    pub name: *const ::std::os::raw::c_char,
    #[doc = "<The type (see the F0R_PARAM_* defines)"]
    pub type_: ::std::os::raw::c_int,
    #[doc = "<Optional explanation (can be 0)"]
    pub explanation: *const ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_f0r_param_info() {
    assert_eq!(
        ::std::mem::size_of::<f0r_param_info>(),
        24usize,
        concat!("Size of: ", stringify!(f0r_param_info))
    );
    assert_eq!(
        ::std::mem::align_of::<f0r_param_info>(),
        8usize,
        concat!("Alignment of ", stringify!(f0r_param_info))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<f0r_param_info>())).name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(f0r_param_info),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<f0r_param_info>())).type_ as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(f0r_param_info),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<f0r_param_info>())).explanation as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(f0r_param_info),
            "::",
            stringify!(explanation)
        )
    );
}
#[doc = " Similar to f0r_plugin_info_t, this structure is filled by the plugin"]
#[doc = " for every parameter."]
#[doc = ""]
#[doc = " All strings are unicode, 0-terminated, and the encoding is utf-8."]
pub type f0r_param_info_t = f0r_param_info;
extern "C" {
    #[doc = " f0r_get_param_info is called by the application to query the type of"]
    #[doc = " each parameter."]
    #[doc = ""]
    #[doc = " \\param info is allocated by the application and filled by the plugin"]
    #[doc = " \\param param_index the index of the parameter to be queried (from 0 to"]
    #[doc = "   num_params-1)"]
    pub fn f0r_get_param_info(info: *mut f0r_param_info_t, param_index: ::std::os::raw::c_int);
}
#[doc = " Transparent instance pointer of the frei0r effect."]
pub type f0r_instance_t = *mut ::std::os::raw::c_void;
extern "C" {
    #[doc = " Constructor for effect instances. The plugin returns a pointer to"]
    #[doc = " its internal instance structure."]
    #[doc = ""]
    #[doc = " The resolution must be an integer multiple of 8,"]
    #[doc = " must be greater than 0 and be at most 2048 in both dimensions."]
    #[doc = " The plugin must set default values for all parameters in this function."]
    #[doc = ""]
    #[doc = " \\param width The x-resolution of the processed video frames"]
    #[doc = " \\param height The y-resolution of the processed video frames"]
    #[doc = " \\returns 0 on failure or a pointer != 0 on success"]
    #[doc = ""]
    #[doc = " \\see f0r_destruct"]
    pub fn f0r_construct(
        width: ::std::os::raw::c_uint,
        height: ::std::os::raw::c_uint,
    ) -> f0r_instance_t;
}
extern "C" {
    #[doc = " Destroys an effect instance."]
    #[doc = ""]
    #[doc = " \\param instance The pointer to the plugins internal instance structure."]
    #[doc = ""]
    #[doc = " \\see f0r_construct"]
    pub fn f0r_destruct(instance: f0r_instance_t);
}
#[doc = " Transparent parameter handle."]
pub type f0r_param_t = *mut ::std::os::raw::c_void;
extern "C" {
    #[doc = " This function allows the application to set the parameter values of an"]
    #[doc = " effect instance. Validity of the parameter pointer is handled by the"]
    #[doc = " application thus the data must be copied by the effect."]
    #[doc = ""]
    #[doc = " If the parameter type is of F0R_PARAM_STRING, then the caller should"]
    #[doc = " supply a pointer to f0r_param_string (char**). The plugin must copy"]
    #[doc = " copy the string and not assume it exists beyond the lifetime of the call."]
    #[doc = " The reason a double pointer is requested when only a single is really"]
    #[doc = " needed is simply for API consistency."]
    #[doc = ""]
    #[doc = " Furthermore, if an update event/signal is needed in a host"]
    #[doc = " application to notice when parameters have changed, this should be"]
    #[doc = " implemented inside its own update() call. The host application"]
    #[doc = " would presumably need to store the current value as well to see if"]
    #[doc = " it changes; to make this thread safe, it should store a copy of the"]
    #[doc = " current value in a struct which uses instance as a key."]
    #[doc = ""]
    #[doc = " \\param instance the effect instance"]
    #[doc = " \\param param pointer to the parameter value"]
    #[doc = " \\param param_index index of the parameter"]
    #[doc = ""]
    #[doc = " \\see f0r_get_param_value"]
    pub fn f0r_set_param_value(
        instance: f0r_instance_t,
        param: f0r_param_t,
        param_index: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[doc = " This function allows the application to query the parameter values of an"]
    #[doc = " effect instance."]
    #[doc = ""]
    #[doc = " If the parameter type is of F0R_PARAM_STRING, then the caller should"]
    #[doc = " supply a pointer to f0r_param_string (char**). The plugin sets the"]
    #[doc = " pointer to the address of its copy of the parameter value. Therefore,"]
    #[doc = " the caller should not free the result. If the caller needs to modify"]
    #[doc = " the value, it should make a copy of it and modify before calling"]
    #[doc = " f0r_set_param_value()."]
    #[doc = ""]
    #[doc = " \\param instance the effect instance"]
    #[doc = " \\param param pointer to the parameter value"]
    #[doc = " \\param param_index index of the parameter"]
    #[doc = ""]
    #[doc = " \\see f0r_set_param_value"]
    pub fn f0r_get_param_value(
        instance: f0r_instance_t,
        param: f0r_param_t,
        param_index: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[doc = " This is where the core effect processing happens. The application calls it"]
    #[doc = " after it has set the necessary parameter values."]
    #[doc = " inframe and outframe must be aligned to an integer multiple of 16 bytes"]
    #[doc = " in memory."]
    #[doc = ""]
    #[doc = " This function should not alter the parameters of the effect in any"]
    #[doc = " way (\\ref f0r_get_param_value should return the same values after a call"]
    #[doc = " to \\ref f0r_update as before the call)."]
    #[doc = ""]
    #[doc = " The function is responsible to restore the fpu state (e.g. rounding mode)"]
    #[doc = " and mmx state if applicable before it returns to the caller."]
    #[doc = ""]
    #[doc = " The host mustn't call \\ref f0r_update for effects of type"]
    #[doc = " \\ref F0R_PLUGIN_TYPE_MIXER2 and \\ref F0R_PLUGIN_TYPE_MIXER3."]
    #[doc = ""]
    #[doc = " \\param instance the effect instance"]
    #[doc = " \\param time the application time in seconds but with subsecond resolution"]
    #[doc = "        (e.g. milli-second resolution). The resolution should be at least"]
    #[doc = "        the inter-frame period of the application."]
    #[doc = " \\param inframe the incoming video frame (can be zero for sources)"]
    #[doc = " \\param outframe the resulting video frame"]
    #[doc = ""]
    #[doc = " \\see f0r_update2"]
    pub fn f0r_update(instance: f0r_instance_t, time: f64, inframe: *const u32, outframe: *mut u32);
}
extern "C" {
    #[doc = " For effects of type \\ref F0R_PLUGIN_TYPE_SOURCE or"]
    #[doc = " \\ref F0R_PLUGIN_TYPE_FILTER this method is optional. The \\ref f0r_update"]
    #[doc = " method must still be exported for these two effect types. If both are"]
    #[doc = " provided the behavior of them must be the same."]
    #[doc = ""]
    #[doc = " Effects of type \\ref F0R_PLUGIN_TYPE_MIXER2 or \\ref F0R_PLUGIN_TYPE_MIXER3 must provide the new \\ref f0r_update2 method."]
    #[doc = ""]
    #[doc = " \\param instance the effect instance"]
    #[doc = " \\param time the application time in seconds but with subsecond resolution"]
    #[doc = "        (e.g. milli-second resolution). The resolution should be at least"]
    #[doc = "        the inter-frame period of the application."]
    #[doc = " \\param inframe1 the first incoming video frame (can be zero for sources)"]
    #[doc = " \\param inframe2 the second incoming video frame"]
    #[doc = "(can be zero for sources and filters)"]
    #[doc = " \\param inframe3 the third incoming video frame"]
    #[doc = "(can be zero for sources, filters and mixer2)"]
    #[doc = " \\param outframe the resulting video frame"]
    #[doc = ""]
    #[doc = " \\see f0r_update"]
    pub fn f0r_update2(
        instance: f0r_instance_t,
        time: f64,
        inframe1: *const u32,
        inframe2: *const u32,
        inframe3: *const u32,
        outframe: *mut u32,
    );
}
